Datatypes

variable is a container to store data

text-> "I am shubham" : String Datatype, String is group of characters

Numbers -> int   (-2^31 <= int[4byte:32bits] <= 2^31-1)  approx -10^9 <=int<= 10^9}
           long   (-2^63 <= long[8bytes:64bits] <= 2^63-1)  approx -10^18 <=long<= 10^18}
           | {... -∞,...,-3,-2,-1,0,1,2,3,...,∞...}
           | Positive and Negative whole numbers


           float  32bits  } 7 decimal digits
           double 64bits  } 15 decimal digits
           | to store decimal values
           | 3.14,1.56,9.23 etc


Type Casting:
converting one Datatype to another

overflow: Long to int conversion when long has more value which not able to get store in int
          but we forcefully converting its leads to overflow(after overflow int might have
          garbage value)

Implicit TypeCasting : when we store smaller Datatype to larger datatype
explicit Typecasting : forcefully converting larger datatype to smaller datatype
                    why garbage value when larger to smaller datatype conversion?
                    64 bit try to store in 32 bit then remaining 32 bit get discarded.
                    if long value is within 32 bit range then there will be no garbage
                    long 1000000000000 = binary  0000000000000000000000001110100011010100101001010001000000000000
                    when converting to int only takes 32 bit which is : 0000000000000000000000001110100
                    binarty 0000000000000000000000001110100 = int 116(This we consider as garbage)
